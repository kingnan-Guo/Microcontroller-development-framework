SET(LIBPRINT_CPP print.cpp)
SET(LIBPRINT_HPP print.hpp)

add_library(print SHARED print.cpp)

target_sources(print 
PUBLIC
    ${LIBPRINT_HPP}
PRIVATE
    ${LIBPRINT_CPP}
)

target_include_directories(print
PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
)

# 链接 mdf_compiler_flags 与 ōther  相当于将 mdf_compiler_flags 设置的 cxx_std_11 绑定给 other
target_link_libraries(print
PUBLIC
    mdf_compiler_flags
)

# -----------------------------  分界线 -----------
# ---------------------------- 
# 1、以下这段程序 也是可以使用的 会生成动静态库 静态库用于 在 /src/main.cpp 打包
# 2、如果想用动态库 有两个条件 
#     a、在 /src/CMackeLists 中 的 target_link_libraries(mdf  PUBLIC evolution print print_dynamic) 加入 print_dynamic
#     b、 打包后 会生成 print.dll 的文件 要把 文件 放到 /build/src 文件夹下才可以运行 要不然会 报 .dll 找不到的错误

# # LIBPRINT_CPP  定义的变量, 变量里放置 print.cpp
# SET(LIBPRINT_CPP print.cpp)
# SET(LIBPRINT_HPP print.hpp)
# # 生成 lib 的名字叫 print ; 最终产生的  文件是  libprint.so
# # SHARED 共享库 ;如果是静态库 那么 STATIC
# # ${LIB_PRINT} 读取  LIB_PRINT变量  里放置 print.cpp 

# message(STATUS "LIBPRINT_CPP : ${LIBPRINT_CPP} ")
# message(STATUS "LIBPRINT_HPP: ${LIBPRINT_HPP} ")
# message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR} ")

# # 生成动静态库
# # 生成静态库
# ADD_LIBRARY(print STATIC ${LIBPRINT_HPP} ${LIBPRINT_CPP})
# # 设置静态库的输出名称
# SET_TARGET_PROPERTIES(print PROPERTIES OUTPUT_NAME "print")
# # cmake 在构建一个新的 target 时  会清理掉其他用这个名字的库 因为在构建 libprint.dll 时 会清理 
# SET_TARGET_PROPERTIES(print PROPERTIES CLEAN_DIRECT_OUTPUT 1)

# target_include_directories(print
# PUBLIC
#     ${CMAKE_CURRENT_SOURCE_DIR}
# )

# # # 生成动态库
# add_library(print_dynamic SHARED ${LIBPRINT_HPP} ${LIBPRINT_CPP})
# # 设置动态库的输出名称
# SET_TARGET_PROPERTIES(print_dynamic PROPERTIES OUTPUT_NAME "print")
# SET_TARGET_PROPERTIES(print_dynamic PROPERTIES CLEAN_DIRECT_OUTPUT 1)

# target_include_directories(print_dynamic
# PUBLIC
#     ${CMAKE_CURRENT_SOURCE_DIR}
# )

# #修改版本号
# # SET_TARGET_PROPERTIES(print PROPERTIES VERSION 1.2 SOVERSION 1)
# # 安装头文件
# # 文件放置在 该目录下
# # INSTALL(FILES print.h DESTINATION include/print)
# # # 二进制 静态库 动态库 安装都用 TARGETS
# # INSTALL(TARGETS print print_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
